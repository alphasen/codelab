#!/usr/bin/env node

'use strict';

var colors = require('colors/safe'),
    path = require('path'),
    fs = require('fs'),
    os = require('os'),
    codelab = require('../lib'),
    portfinder = require('portfinder'),
    opener = require('opener'),
    argv = require('minimist')(process.argv.slice(2));

var ifaces = os.networkInterfaces();

if (argv.h || argv.help) {
    console.log(
        [
            'usage: codelab [path] [options]',
            '',
            'options:',
            '  -p --port    Port to use [8080]',
            '  -a           Address to use [0.0.0.0]',
            '  -s --silent  Suppress log messages from output',
            '  --open       Open browser window after starting the server,default is true',
            "  --log-ip     Enable logging of the client's IP address,default is true",
            "  --log-user-agent Enable logging request's user-agent,default is false",
            '',
            ' example: codelab ../workplace -p 3331 --log-user-agent 192.168.2.2 --log-ip=false --open=false',
            '',
            '  -h --help    Print this list and exit.'
        ].join('\n')
    );
    process.exit();
}

var port = argv.p || argv.port || parseInt(process.env.PORT, 10),
    host = argv.a || '0.0.0.0',
    isLogIp = argv['log-ip'] != 'false' && argv['log-ip'] != '0',
    isLogUseragent = argv['log-user-agent']
        ? argv['log-user-agent'] != 'false' && argv['log-user-agent'] != '0'
        : false,
    logger;

port ? (port = (port + '').trim()) : '';
host ? (host = (host + '').trim()) : '';

if (!argv.s && !argv.silent) {
    logger = {
        info: console.log,
        request: function(req, res, error) {
            var date = new Date().toISOString();
            var ip = isLogIp
                ? req.headers['x-forwarded-for'] ||
                  '' + req.connection.remoteAddress
                : '';
            if (error) {
                logger.info(
                    '[%s] %s "%s %s" Error (%s): "%s"',
                    date,
                    ip,
                    colors.red(req.method),
                    colors.red(req.url),
                    colors.red(error.status.toString()),
                    colors.red(error.message)
                );
            } else {
                if (isLogUseragent) {
                    logger.info(
                        '[%s] %s "%s %s" "%s"',
                        date,
                        ip,
                        colors.cyan(req.method),
                        colors.cyan(req.url),
                        req.headers['user-agent']
                    );
                } else {
                    logger.info(
                        '[%s] %s "%s %s"',
                        date,
                        ip,
                        colors.cyan(req.method),
                        colors.cyan(req.url)
                    );
                }
            }
        }
    };
} else if (colors) {
    logger = {
        info: function() {},
        request: function() {}
    };
}

if (!port) {
    portfinder.basePort = 3333;
    portfinder.getPort(function(err, port) {
        if (err) {
            throw err;
        }
        listen(port);
    });
} else {
    listen(port);
}

function listen(port) {
    var rootPath = process.cwd(),
        commandPath = argv._[0];
    if (commandPath && fs.existsSync(commandPath)) {
        if (path.isAbsolute(commandPath)) {
            rootPath = commandPath;
        } else {
            rootPath = path.resolve(process.cwd(), commandPath || '');
        }
    } else {
        logger.info(colors.red('the path of specified is invalid'));
        return;
    }
    var options = {
        rootPath: rootPath,
        logger: logger
    };

    var server = codelab.createServer(options);
    server.listen(port, host, function() {
        var canonicalHost = host === '0.0.0.0' ? '127.0.0.1' : host,
            protocol = 'http://';

        logger.info(
            [
                colors.yellow('Starting up codelab, serving '),
                colors.cyan(rootPath),
                colors.yellow('\nAvailable on:')
            ].join('')
        );

        if (argv.a && host !== '0.0.0.0') {
            logger.info(
                '  ' +
                    protocol +
                    canonicalHost +
                    ':' +
                    colors.green(port.toString())
            );
        } else {
            Object.keys(ifaces).forEach(function(dev) {
                ifaces[dev].forEach(function(details) {
                    if (details.family === 'IPv4') {
                        logger.info(
                            '  ' +
                                protocol +
                                details.address +
                                ':' +
                                colors.green(port.toString())
                        );
                    }
                });
            });
        }

        logger.info('Hit CTRL-C to stop the server');
        if (argv.open != 'false' && argv.open != '0') {
            // go to browser
            var openUrl = protocol + canonicalHost + ':' + port;
            if (typeof argv.o === 'string') {
                openUrl += argv.o[0] === '/' ? argv.o : '/' + argv.o;
            }
            logger.info('open: ' + openUrl);
            opener(openUrl);
        }
    });
}

if (process.platform === 'win32') {
    require('readline')
        .createInterface({
            input: process.stdin,
            output: process.stdout
        })
        .on('SIGINT', function() {
            process.emit('SIGINT');
        });
}

process.on('SIGINT', function() {
    logger.info(colors.red('codelab stopped.'));
    process.exit();
});

process.on('SIGTERM', function() {
    logger.info(colors.red('codelab stopped.'));
    process.exit();
});
